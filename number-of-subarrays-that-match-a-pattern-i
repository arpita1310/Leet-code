class Solution {
public:
    int KMPSearch(vector<int> pat, vector<int> txt)
{
    int M = pat.size();
    int N = txt.size();
    int lps[M];
    computeLPSArray(pat, M, lps);
 
    int i = 0; 
    int j = 0; 
        int ans=0;
    while ((N - i) >= (M - j)) {
        if (pat[j] == txt[i]) {
            j++;
            i++;
        }
 
        if (j == M) {
            ans++;
            j = lps[j - 1];
        }

        else if (i < N && pat[j] != txt[i]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
        return ans;
}
    void computeLPSArray(vector<int> pat, int M, int* lps)
{

    int len = 0;
 
    lps[0] = 0;
 
  
    int i = 1;
    while (i < M) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else 
        {
            
            if (len != 0) {
                len = lps[len - 1];
            }
            else
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}
    int countMatchingSubarrays(vector<int>& v, vector<int>& p) {
        int n=v.size();
        int m=p.size();
        vector<int>t;
        for(int i=0;i+1<n;i++) {
            if(v[i]>v[i+1])
                t.push_back(-1);
            else if(v[i]==v[i+1])
                t.push_back(0);
            else
                t.push_back(1);
        }
        int ans=KMPSearch(p,t);
        return ans;
    }
};
