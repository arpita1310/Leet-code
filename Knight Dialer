// class Solution {
// public:
// int mod=1e9+7;
// long long dp[5000][10];
// vector<vector<int>>vv = { {4,6},{8,6},{7,9},{8,4},{3,9,0},{},{1,7,0},{6,2},{1,3},{2,4} };
//     long long f(int n,int i){
//         if(n==0) return 1;
//         if(dp[n][i]!=-1)  return dp[n][i];
//         long long ans=0;
//         for(auto d:vv[i]){
//             ans+=(f(n-1,d))%mod;
//         }
//         return dp[n][i]=ans;
//     }
//     int knightDialer(int n) {
//         if(n==1) return 10;
//         long long ans=0;
//         memset(dp,-1,sizeof(dp));
//         for(int i=0;i<=9;i++){
//             if(i==5) continue;
//             ans+=f(n-1,i)%mod;
//         }
//         return ans%mod;
//     }
// };

class Solution {
public:
    int M = 1e9+7;
    vector<vector<int>> adj = {
        {4, 6},
        {6, 8},
        {7, 9},
        {4, 8},
        {3, 9, 0},
        {},
        {1, 7, 0},
        {2, 6},
        {1, 3},
        {2, 4}
    };
    
    int knightDialer(int n) {
        int result = 0;
        vector<vector<int>> t(n, vector<int>(10));
        for(int cell = 0; cell < 10; cell++) {
            t[0][cell] = 1;
        }
        
        for(int i = 1; i < n; i++) {    
            for(int cell = 0; cell <= 9; cell++) {    
                int ans = 0;
                for(int &nextCell : adj[cell]) {
                    
                    ans = (ans + t[i-1][nextCell]) % M;
                    
                }
                t[i][cell] = ans;    
            }    
        }
         
        for(int cell = 0; cell <= 9; cell++) {
            result = (result + t[n-1][cell]) % M;
        }
        return result;
    }
};
